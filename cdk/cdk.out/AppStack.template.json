{
 "Resources": {
  "AppStaticMediaBucketE4DC0277": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "pollpub-static-media",
    "PublicAccessBlockConfiguration": {
     "BlockPublicPolicy": false
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "AppStack/AppStaticMediaBucket/Resource"
   }
  },
  "AppStaticMediaBucketPolicy35569084": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "AppStaticMediaBucketE4DC0277"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "AWS": "*"
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "AppStaticMediaBucketE4DC0277",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppStaticMediaBucket/Policy/Resource"
   }
  },
  "AppVPCB7733741": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/Resource"
   }
  },
  "AppVPCPublicSubnet1Subnet5EAE38B2": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/24",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet1/Subnet"
   }
  },
  "AppVPCPublicSubnet1RouteTable63382DC5": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet1/RouteTable"
   }
  },
  "AppVPCPublicSubnet1RouteTableAssociation10038102": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AppVPCPublicSubnet1RouteTable63382DC5"
    },
    "SubnetId": {
     "Ref": "AppVPCPublicSubnet1Subnet5EAE38B2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet1/RouteTableAssociation"
   }
  },
  "AppVPCPublicSubnet1DefaultRoute51A04DF7": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "AppVPCIGW7D765419"
    },
    "RouteTableId": {
     "Ref": "AppVPCPublicSubnet1RouteTable63382DC5"
    }
   },
   "DependsOn": [
    "AppVPCVPCGW31CBD692"
   ],
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet1/DefaultRoute"
   }
  },
  "AppVPCPublicSubnet2Subnet19F05CAF": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.1.0/24",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet2/Subnet"
   }
  },
  "AppVPCPublicSubnet2RouteTable3C9BB83A": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet2/RouteTable"
   }
  },
  "AppVPCPublicSubnet2RouteTableAssociationDB170019": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "AppVPCPublicSubnet2RouteTable3C9BB83A"
    },
    "SubnetId": {
     "Ref": "AppVPCPublicSubnet2Subnet19F05CAF"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet2/RouteTableAssociation"
   }
  },
  "AppVPCPublicSubnet2DefaultRouteC200D8E4": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "AppVPCIGW7D765419"
    },
    "RouteTableId": {
     "Ref": "AppVPCPublicSubnet2RouteTable3C9BB83A"
    }
   },
   "DependsOn": [
    "AppVPCVPCGW31CBD692"
   ],
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/PublicSubnet2/DefaultRoute"
   }
  },
  "AppVPCIGW7D765419": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppVPC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/IGW"
   }
  },
  "AppVPCVPCGW31CBD692": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "AppVPCIGW7D765419"
    },
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppVPC/VPCGW"
   }
  },
  "AppSG652848D9": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "AppStack/AppSG",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow SSH",
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTP",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow HTTPS",
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "VpcId": {
     "Ref": "AppVPCB7733741"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppSG/Resource"
   }
  },
  "AppInstanceInstanceRole67BDC071": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSESFullAccess"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppInstance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppInstance/InstanceRole/Resource"
   }
  },
  "AppInstanceInstanceRoleDefaultPolicy41E4728A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AppStaticMediaBucketE4DC0277",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AppStaticMediaBucketE4DC0277",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "AppInstanceInstanceRoleDefaultPolicy41E4728A",
    "Roles": [
     {
      "Ref": "AppInstanceInstanceRole67BDC071"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppInstance/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "AppInstanceInstanceProfileC6B6EFAA": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "AppInstanceInstanceRole67BDC071"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppInstance/InstanceProfile"
   }
  },
  "AppInstance13C82D50": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "IamInstanceProfile": {
     "Ref": "AppInstanceInstanceProfileC6B6EFAA"
    },
    "ImageId": "ami-0731becbf832f281e",
    "InstanceType": "t3.micro",
    "KeyName": "pollpub-ec2-key",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "AppSG652848D9",
       "GroupId"
      ]
     }
    ],
    "SubnetId": {
     "Ref": "AppVPCPublicSubnet1Subnet5EAE38B2"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "AppStack/AppInstance"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash\nsudo apt-get update -y\nsudo apt-get install -y python3-pip python3-venv git nginx\nsudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev\nsudo apt-get install redis-server\nsudo apt-get install certbot python3-certbot-nginx\nmkdir -p /home/ubuntu/poll/static\nmkdir -p /home/ubuntu/poll/cache\nmkdir -p /home/ubuntu/.ssh\necho 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUNGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFnRUF0SSt0TnlDNkVrRnFXSjJnNjM4R0dZMUtmWEl6VHJTeDhWck5vb0Y4cG04Q0xXN0pOK1JCCnFRTGVQb1JzV2txREZVclUwNmdZMWxoWXd5QTVyZmp4VU54cFNqQzRMMitCcDFtSzF4QWFCejdzVjZ6V1czZktmL3lFUFcKaE5tejBDWlRqSjdqUTYrazNFVmxTNWNkc1R5aGVtRGJzN0c5bzc0MGVDV1Y2UnZJazY1L0FVaHpRN0dXeit0b3JpNVFnVwo3STlGSzV0WGhmVDhYY3lxN2pzN3ZHK1lXWU02WkxzMDhob09Pay85aXE3QmdXT1FyTjFuVkI5Vkh6UHVoSzgxWjQwb2s3ClhiR29OTTA2RXdMUUxsTS9qaFZrWmtxSUhEd2FNZVFPNWlTRVBEZ2J0UHJVWmZrUmhNMFFpY3Vya1Z6eFg4a3pVWXF4ajkKaDQ4VnZacHQ2d0lpV2lHNFdGR2dDME81anlOYm1aKy9qdUF6STVzenh6UnBSRjl6aURZZ3R1WEdyQ0llWVBPVUYwSlZPQgp4aGRmUmJ4bzhTU0NFaEpxNmkvZzBFdUFxcTJvZG9DZjJ6bFJVVmV5R08yN202ZmpsM04wbTcvWklQckNFWHNhV1NicVFaCjNzYW9mTUg1N2ZHbk5yNW1NZjkvZFMvK1QvWndGQ0w0RjZYOW5hOGhwaWNwOFBlcnFDYzZ2V0x3NmtXNVFrQ05sWUlMTHUKS0xJUDVlTFpsTFpRSEV6cmFEM2gxQ3VWQjJ6R1ZFelFHT2hUMXdURWlVQ21ueWVSVFNFMWRwUzdSZjRCUTU4UE4zazQwSgpiSDdGVHpWQk9FbnZpK1lGYW1URCtLQzZwbC9CUkl6YjJ4M0FXOWtzUCt6NVBXSUQvQytydzdPOVBUQm15cnZXbXh0U2ZmCmNBQUFkSWhGb21pNFJhSm9zQUFBQUhjM05vTFhKellRQUFBZ0VBdEkrdE55QzZFa0ZxV0oyZzYzOEdHWTFLZlhJelRyU3gKOFZyTm9vRjhwbThDTFc3Sk4rUkJxUUxlUG9Sc1drcURGVXJVMDZnWTFsaFl3eUE1cmZqeFVOeHBTakM0TDIrQnAxbUsxeApBYUJ6N3NWNnpXVzNmS2YveUVQV2hObXowQ1pUako3alE2K2szRVZsUzVjZHNUeWhlbURiczdHOW83NDBlQ1dWNlJ2SWs2CjUvQVVoelE3R1d6K3Rvcmk1UWdXN0k5Rks1dFhoZlQ4WGN5cTdqczd2RytZV1lNNlpMczA4aG9PT2svOWlxN0JnV09Rck4KMW5WQjlWSHpQdWhLODFaNDBvazdYYkdvTk0wNkV3TFFMbE0vamhWa1prcUlIRHdhTWVRTzVpU0VQRGdidFByVVpma1JoTQowUWljdXJrVnp4WDhrelVZcXhqOWg0OFZ2WnB0NndJaVdpRzRXRkdnQzBPNWp5TmJtWisvanVBekk1c3p4elJwUkY5emlECllndHVYR3JDSWVZUE9VRjBKVk9CeGhkZlJieG84U1NDRWhKcTZpL2cwRXVBcXEyb2RvQ2YyemxSVVZleUdPMjdtNmZqbDMKTjBtNy9aSVByQ0VYc2FXU2JxUVozc2FvZk1INTdmR25OcjVtTWY5L2RTLytUL1p3RkNMNEY2WDluYThocGljcDhQZXJxQwpjNnZXTHc2a1c1UWtDTmxZSUxMdUtMSVA1ZUxabExaUUhFenJhRDNoMUN1VkIyekdWRXpRR09oVDF3VEVpVUNtbnllUlRTCkUxZHBTN1JmNEJRNThQTjNrNDBKYkg3RlR6VkJPRW52aStZRmFtVEQrS0M2cGwvQlJJemIyeDNBVzlrc1ArejVQV0lEL0MKK3J3N085UFRCbXlydldteHRTZmZjQUFBQURBUUFCQUFBQ0FHT21PN21HQlVzWDhTSXc5R09qdWZFV0tqc3JjS2VLVC81YwoxOHBNM2tkWVVvSlNkeGl5ajQ1QU4vbVd5ZG5XNzVzcnJtT1ZqUWVXd0g0SDVlMWV5NGVON1VuMXMyRHlrRUtVeDJ4RHhhCm1rRDNtZnVMbklWZWptcXZEZEJKK2RQeG93Q2ptOWQ2TTJraG4zTGxWb3kvWW5zUXc0L2JrMGF3TFhMMWcxT2djc1VXYzUKOTRwYXlCY1RNVXY3UUplWUxGYW9CMHUyc3NvS1Y5RklxRGxNVlg1OHREOEtqb3FUU3ZnbWF4M0JrYk1kR1V4WWI3c0hnZwpSS09vYzYrUE1mWTBEZ0Jibm5qcUdHUHpzNDVVYWlKMjdVZDBCUEh6UmtVVzRub1FYQ3lsa0psUGVmTWF6MmZyMnNCSkVFCnlNTEFiUW5hSDRmNnNMK1V6aThuUjU5WmdEbGFqTXpNdXUvMnFna1RQbVYyTEpBSkZ4RjgxV0hmajRQUXpWVDlBM1E5ZksKUzNRNzZvcW95Y2liVzNLTHNKNE8xZUEyMTh4b2VPeUd6bW8wYURaaURQM0Y0L09DcThkVXFYelcrdDk2WVVKeVM1QktwUApTOG5TaEdsQ2l6U1VwTGZlRHRkdTg3SFVNYTNnK3pGdE0vV1krdHZjUlhnWitlVkM1QjVKWk1xcFIwSm03MUNsTU8wZzRBCk9LQ3dWTTdNMmZ1cXk4RWtINEkvK0RxYzc1QkhrNjBOeXZla3BUQWg3dUZtMFN6b3RWbllGUG5WSzd3YkQyZjN2aXNYWCsKL3grVWVFd0YrMzdWOHY5aDhCb29rYnF1L21UcENxRzRpRXREVDJibjZtdXdKcllOa2h3RHVkdjU5ZmpDY1Z1TlgvRXRKSApSYXo3anF2WmMrZkNTWjhaMEJBQUFCQUhPL1BRbnhQUHhjT0NQQUxGeThkM2JvWWlvTEc2SDZGTnNXaVdhRzB4Rk55YnBBCnN6NVhNVS9QWnVXV1J6SUpuM2xBc1crUDV6SDQzZFFXVC9EYXJJVEJJanU1a0NISUtsNzRUSGE2cDMvOGtDaTJ5RGpYS0IKSE5CT2lDdHVQM1VqYmhxcjVtaXJlWHdaMWdSUE5NRzJvb2xlT0NXT25IRGlROG1Pa283bU9MNjNhbUNwOEI4bmNxZSt5awpnWXFRWFVqUmpyeHhYdExxUmZmWkkwR3cwWDZHZjFLb1ZtRmdveTN5R0lkUHFnenpPUEtzVXJad1NRcENuVDVCY1BwalAwCnlSdDNPN0V5T3cwNEVRS21IWFppa0VHUTJMOTNid2pQZGE4SW9FQUxPZXkrM0ZZcUlRcEhscHBURDBkckxVTTMyR0xHRW4Ka3NTbU5tT3lvMzNGbDVFQUFBRUJBTjExR0JrSWxlUHFhWTZjaUVsT05yajAvUkNHdlVnMHltS1BkUjBqZlBKdWxYZFE2VAo5TkRJQThYcm0xZzJ0U0l2dmlyWUVIOWtBZVFPWGdCUHhIWnc5YmpRZXY5eUlHSTRBb05IbnVaZTh2RWQ5c01sVjJ6aVo5CkRhTUlieDc5dUw3c0M4QnI0NWlZQlBHWVdQQ3lTSkpBbDF5SVpGeTgwTUZ4TUV3dWl0a0lwSkY5bmd3VjFnVFhSUEdtSkQKeWFpZmhFQUFUb3A2M3dNWjU0Y2llTFpwT05BZmRjZzJERmF2UnB6UmlZM3BXVVpiNWw3L0Iza0NzMU1Odm5ldEFXV0xycwpwMHdvNGpweWtLak9MVERTaXVPbDVNTkZiTXNmYm5yOTFtbGNYMjFhbXVFN1h0TzcrcFRKUUpPRWxKbCtrZWI3Z2NmL2dVCmVsTXNRYW1UM0hwNEVBQUFFQkFOQzVrL3dwR3RyNlZxcHZ4UElQYi92aDlUaUdzTmovdHNTRnFZRE9xSklpUGlzWXRYaHoKSkh1dG1pS1YvbHFjWHRWanNOaUF5WUFFSDlLS3dKQ2dFYXVLYmp5dWRJT3J3RytRQUE2Zk1WN2xQK01uTDkvdlR2VUVPbApIRzdob050NjR4WnZtUEwwR013bGZkcE5oUkhzQi8zdlVpaHFxbTNHOUZBQkg3WVhpYlFYUkEzUVUxMEd4Q2FmQ0crY0xkCk96dk9tR2dkRmNCU3FId2l5QktRUE5XTjd5RHZVOHB2MUlwbXZKTWJPUlhUZitITkFBVUt6SWYrQ1BPdGxpNitVdGpraHoKV21YQlN6V2ZVQXFiYzV2ZnFjcG9oSjRwdjJwMllpZjU3eGw0bm9TdlBCcDhpdFB3aGQycE92UTZSb0FuNUZUTkdrK2oybwpyOGpGR0R6c0lYY0FBQUFQY0c5c2JDQmtaWEJzYjNrZ2EyVjVBUUlEQkE9PQotLS0tLUVORCBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0K' | base64 -d > /home/ubuntu/.ssh/id_rsa\nchmod 600 /home/ubuntu/.ssh/id_rsa\nchown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa\nssh-keyscan github.com >> /home/ubuntu/.ssh/known_hosts\nchown ubuntu:ubuntu /home/ubuntu/.ssh/known_hosts\nsudo -u ubuntu git clone {repo_url} /home/ubuntu/poll || true\nsudo -u ubuntu python3 -m venv /home/ubuntu/poll/venv\nsudo -u ubuntu /home/ubuntu/poll/venv/bin/pip install --upgrade pip\nsudo -u ubuntu /home/ubuntu/poll/venv/bin/pip install -r /home/ubuntu/poll/requirements.txt\nsudo -u ubuntu /home/ubuntu/poll/venv/bin/python manage.py migrate\nsudo -u ubuntu /home/ubuntu/poll/venv/bin/python manage.py collectstatic --noinput\nsudo tee /etc/systemd/system/poll.service > /dev/null <<EOF\n[Unit]\nDescription=Gunicorn daemon for PollPub\nAfter=network.target\n[Service]\nUser=ubuntu\nGroup=ubuntu\nWorkingDirectory=/home/ubuntu/poll\nEnvironment='PATH=/home/ubuntu/poll/venv/bin'\nExecStart=/home/ubuntu/poll/venv/bin/gunicorn poll.wsgi:application --workers 3 --bind 0.0.0.0:8000\nRestart=always\nRestartSec=5\n[Install]\nWantedBy=multi-user.target\nEOF\nsudo tee /etc/systemd/system/celery.service > /dev/null <<EOF\n[Unit]\nDescription=Celery worker for PollPub\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nWorkingDirectory=/home/ubuntu/poll\nEnvironment='PATH=/home/ubuntu/poll/venv/bin'\nExecStart=/home/ubuntu/poll/venv/bin/celery -A poll worker --concurrency=1 --loglevel=INFO\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reexec\nsudo systemctl daemon-reload\nsudo systemctl enable redis-server\nsudo systemctl start redis-server\nsudo systemctl enable celery\nsudo systemctl start celerysudo systemctl enable poll\nsudo systemctl start pollecho 'server {\n    listen 80;\n    server_name poll.pub;\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        alias /home/ubuntu/poll/static/;\n    }\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}' | sudo tee /etc/nginx/sites-available/poll > /dev/nullsudo ln -sf /etc/nginx/sites-available/poll /etc/nginx/sites-enabled\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl restart nginx"
    }
   },
   "DependsOn": [
    "AppInstanceInstanceRoleDefaultPolicy41E4728A",
    "AppInstanceInstanceRole67BDC071"
   ],
   "Metadata": {
    "aws:cdk:path": "AppStack/AppInstance/Resource"
   }
  },
  "AppElasticIP": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppElasticIP"
   }
  },
  "AppElasticIPAssoc": {
   "Type": "AWS::EC2::EIPAssociation",
   "Properties": {
    "EIP": {
     "Ref": "AppElasticIP"
    },
    "InstanceId": {
     "Ref": "AppInstance13C82D50"
    }
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/AppElasticIPAssoc"
   }
  },
  "SESIdentity8C041D13": {
   "Type": "AWS::SES::EmailIdentity",
   "Properties": {
    "EmailIdentity": "poll.pub"
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/SESIdentity/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPQW7DIBB8S+6YprbaexpFkW/IrnKtMNko1BgiWBRZiL+X2LSkp5mdWc3s1rTevtPtht9dJc5jpeRAQ49cjKQDZ7wVQJL3FVxDw4cXIyDZX3RmKzCjpJiLvM6RgKhpON3EwzmxPWF+SEbvB72GFNYZj/DJBwVFL9rOOSMkR2n03/KDtBrBps0jR7jzOdfkaYfpiesEGkkPwluJ89Eaf1sK/gmtdsi1yJGFH1qW4emASCSfaOjMeuqC5f/CfoOYNRepIBIHjobDxKVqz+mo1L6EPwsxRsJmvBr90tDXhr5tvp2UlfXJnYB2K/4AbzvDsLIBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "AppStack/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}